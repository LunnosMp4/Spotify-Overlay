name: Build, Test, and Release Electron App

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Build Electron App
        run: npm run build

      - name: Package the app
        run: npm run package

      - name: Upload artifact for release
        uses: actions/upload-artifact@v3
        with:
          name: electron-app
          path: dist/

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Download packaged artifact
        uses: actions/download-artifact@v3
        with:
          name: electron-app

      - name: Create a release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Find packaged .exe file
        run: |
          ls dist/  # This will list the files in the dist/ directory to help verify the name
          APP_EXE=$(ls dist/*.exe | head -n 1)  # Assuming there's only one .exe file
          echo "Packaged app: $APP_EXE"
          echo "APP_EXE=$APP_EXE" >> $GITHUB_ENV

      - name: Upload asset to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.APP_EXE }}
          asset_name: $(basename ${{ env.APP_EXE }})
          asset_content_type: application/octet-stream
